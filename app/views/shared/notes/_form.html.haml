- supports_autocomplete = local_assigns.fetch(:supports_autocomplete, true)
- supports_quick_actions = note_supports_quick_actions?(@note)
- if supports_quick_actions
  - preview_url = preview_markdown_path(@project, target_type: @note.noteable_type, target_id: @note.noteable_id)
- else
  - preview_url = preview_markdown_path(@project)

= form_for form_resources, url: new_form_url, remote: true, html: { :'data-type' => 'json', multipart: true, id: nil, class: "new-note js-new-note-form js-quick-submit common-note-form", "data-noteable-iid" => @note.noteable.try(:iid), }, authenticity_token: true do |f|
  = hidden_field_tag :view, diff_view
  = hidden_field_tag :line_type
  = hidden_field_tag :merge_request_diff_head_sha, @note.noteable.try(:diff_head_sha)
  = hidden_field_tag :in_reply_to_discussion_id
  = hidden_field_tag :note_project_id

  = note_target_fields(@note)
  = f.hidden_field :noteable_type
  = f.hidden_field :noteable_id
  = f.hidden_field :commit_id
  = f.hidden_field :type

  -# LegacyDiffNote
  = f.hidden_field :line_code

  -# DiffNote
  = f.hidden_field :position

  .discussion-form-container
    = render layout: 'projects/md_preview', locals: { url: preview_url, referenced_users: true } do
      = render 'projects/zen', f: f,
        attr: :note,
        classes: 'note-textarea js-note-text',
        placeholder: _("Write a comment or drag your files hereâ€¦"),
        supports_quick_actions: supports_quick_actions,
        supports_autocomplete: supports_autocomplete
      = render 'shared/notes/hints', supports_quick_actions: supports_quick_actions
      .error-alert

    .note-form-actions.clearfix
      = render partial: 'shared/notes/comment_button'

      = yield(:note_actions)

      %a.btn.btn-cancel.js-close-discussion-note-form.hide{ role: "button", data: { cancel_text: _("Cancel") } }
        = _('Cancel')
