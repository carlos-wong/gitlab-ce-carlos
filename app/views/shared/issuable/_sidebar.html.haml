-# `assignees` is being passed in for populating selected assignee values in the select box and rendering the assignee link
  This should be removed when this sidebar is converted to Vue since assignee data is also available in the `issuable_sidebar` hash

- issuable_type = issuable_sidebar[:type]
- signed_in = !!issuable_sidebar.dig(:current_user, :id)
- can_edit_issuable = issuable_sidebar.dig(:current_user, :can_edit)
- add_page_startup_api_call "#{issuable_sidebar[:issuable_json_path]}?serializer=sidebar_extras"
- reviewers = local_assigns.fetch(:reviewers, nil)
- can_change_duedate = issuable_sidebar.dig(:current_user, :can_change_duedate)

%aside.right-sidebar.js-right-sidebar.js-issuable-sidebar{ data: { signed: { in: signed_in }, issuable_type: issuable_type }, class: sidebar_gutter_collapsed_class, 'aria-live' => 'polite' }
  .issuable-sidebar
    .block.issuable-sidebar-header
      - if signed_in
        %span.issuable-header-text.hide-collapsed.float-left
          = _('To Do')
      %a.gutter-toggle.float-right.js-sidebar-toggle.has-tooltip{ role: "button", href: "#", "aria-label" => _('Toggle sidebar'), title: sidebar_gutter_tooltip_text, data: { container: 'body', placement: 'left', boundary: 'viewport' } }
        = sidebar_gutter_toggle_icon
      - if signed_in
        = render "shared/issuable/sidebar_todo", issuable_sidebar: issuable_sidebar

    = form_for issuable_type, url: issuable_sidebar[:issuable_json_path], remote: true, html: { class: 'issuable-context-form inline-update js-issuable-update' } do |f|
      - if signed_in
        .block.todo.hide-expanded
          = render "shared/issuable/sidebar_todo", issuable_sidebar: issuable_sidebar, is_collapsed: true
      .block.assignee.qa-assignee-block
        = render "shared/issuable/sidebar_assignees", issuable_sidebar: issuable_sidebar, assignees: assignees, signed_in: signed_in

      - if Feature.enabled?(:merge_request_reviewers, @project) && reviewers
        .block.reviewer.qa-reviewer-block
          = render "shared/issuable/sidebar_reviewers", issuable_sidebar: issuable_sidebar, reviewers: reviewers, signed_in: signed_in

      = render_if_exists 'shared/issuable/sidebar_item_epic', issuable_sidebar: issuable_sidebar

      - if issuable_sidebar[:supports_milestone]
        - milestone = issuable_sidebar[:milestone] || {}
        .block.milestone{ data: { qa_selector: 'milestone_block' } }
          .sidebar-collapsed-icon.has-tooltip{ title: sidebar_milestone_tooltip_label(milestone), data: { container: 'body', html: 'true', placement: 'left', boundary: 'viewport' } }
            = sprite_icon('clock')
            %span.milestone-title.collapse-truncated-title
              - if milestone.present?
                = milestone[:title]
              - else
                = _('None')
          .title.hide-collapsed
            = _('Milestone')
            = loading_icon(css_class: 'gl-vertical-align-text-bottom hidden block-loading')
            - if can_edit_issuable
              = link_to _('Edit'), '#', class: 'js-sidebar-dropdown-toggle edit-link float-right', data: { qa_selector: "edit_milestone_link", track_label: "right_sidebar", track_property: "milestone", track_event: "click_edit_button", track_value: "" }
          .value.hide-collapsed
            - if milestone.present?
              - milestone_title = milestone[:expired] ? _("%{milestone_name} (Past due)").html_safe % { milestone_name: milestone[:title] } : milestone[:title]
              = link_to milestone_title, milestone[:web_url], class: "bold has-tooltip", title: sidebar_milestone_remaining_days(milestone), data: { container: "body", html: 'true', boundary: 'viewport', qa_selector: 'milestone_link', qa_title: milestone[:title] }
            - else
              %span.no-value
                = _('None')

          .selectbox.hide-collapsed
            = f.hidden_field 'milestone_id', value: milestone[:id], id: nil
            = dropdown_tag('Milestone', options: { title: _('Assign milestone'), toggle_class: 'js-milestone-select js-extra-options', filter: true, dropdown_class: 'dropdown-menu-selectable', placeholder: _('Search milestones'), data: { show_no: true, field_name: "#{issuable_type}[milestone_id]", project_id: issuable_sidebar[:project_id], issuable_id: issuable_sidebar[:id], ability_name: issuable_type, issue_update: issuable_sidebar[:issuable_json_path], use_id: true, default_no: true, selected: milestone[:title], null_default: true, display: 'static' }})
          - if @project.group.present?
            = render_if_exists 'shared/issuable/iteration_select', { can_edit: can_edit_issuable, group_path: @project.group.full_path, project_path: issuable_sidebar[:project_full_path], issue_iid: issuable_sidebar[:iid], issuable_type: issuable_type }

      - if issuable_sidebar[:supports_time_tracking]
        #issuable-time-tracker.block
          // Fallback while content is loading
          .title.hide-collapsed
            = _('Time tracking')
            = loading_icon
      - if issuable_sidebar.has_key?(:due_date)
        .block.due_date
          .sidebar-collapsed-icon.has-tooltip{ data: { placement: 'left', container: 'body', html: 'true', boundary: 'viewport' }, title: sidebar_due_date_tooltip_label(issuable_sidebar[:due_date]) }
            = sprite_icon('calendar')
            %span.js-due-date-sidebar-value
              = issuable_sidebar[:due_date].try(:to_s, :medium) || _('None')
          .title.hide-collapsed
            = _('Due date')
            = loading_icon(css_class: 'gl-vertical-align-text-bottom hidden block-loading')
            - if can_change_duedate
              = link_to _('Edit'), '#', class: 'js-sidebar-dropdown-toggle edit-link float-right', data: { track_label: "right_sidebar", track_property: "due_date", track_event: "click_edit_button", track_value: "" }
          .value.hide-collapsed
            %span.value-content
              - if issuable_sidebar[:due_date]
                %span.bold= issuable_sidebar[:due_date].to_s(:medium)
              - else
                %span.no-value
                  = _('None')
            - if can_change_duedate
              %span.no-value.js-remove-due-date-holder{ class: ("hidden" if issuable_sidebar[:due_date].nil?) }
                \-
                %a.js-remove-due-date{ href: "#", role: "button" }
                  = _('remove due date')
          - if can_change_duedate
            .selectbox.hide-collapsed
              = f.hidden_field :due_date, value: issuable_sidebar[:due_date].try(:strftime, 'yy-mm-dd')
              .dropdown
                %button.dropdown-menu-toggle.js-due-date-select{ type: 'button', data: { toggle: 'dropdown', field_name: "#{issuable_type}[due_date]", ability_name: issuable_type, issue_update: issuable_sidebar[:issuable_json_path], display: 'static' } }
                  %span.dropdown-toggle-text
                    = _('Due date')
                  = icon('chevron-down', 'aria-hidden': 'true')
                .dropdown-menu.dropdown-menu-due-date
                  = dropdown_title(_('Due date'))
                  = dropdown_content do
                    .js-due-date-calendar


      .js-sidebar-labels{ data: { allow_label_create: issuable_sidebar.dig(:current_user, :can_admin_label).to_s,
        allow_scoped_labels: issuable_sidebar[:scoped_labels_available].to_s,
        can_edit: can_edit_issuable.to_s,
        iid: issuable_sidebar[:iid],
        issuable_type: issuable_type,
        labels_fetch_path: issuable_sidebar[:project_labels_path],
        labels_manage_path: project_labels_path(@project),
        labels_update_path: issuable_sidebar[:issuable_json_path],
        project_issues_path: issuable_sidebar[:project_issuables_path],
        project_path: @project.full_path,
        selected_labels: issuable_sidebar[:labels].to_json } }

      = render_if_exists 'shared/issuable/sidebar_weight', issuable_sidebar: issuable_sidebar

      - if issuable_sidebar[:supports_severity]
        #js-severity

      - if issuable_sidebar.dig(:features_available, :health_status)
        .js-sidebar-status-entry-point

      - if issuable_sidebar.has_key?(:confidential)
        %script#js-confidential-issue-data{ type: "application/json" }= { is_confidential: issuable_sidebar[:confidential], is_editable: can_edit_issuable }.to_json.html_safe
        #js-confidential-entry-point

      %script#js-lock-issue-data{ type: "application/json" }= { is_locked: !!issuable_sidebar[:discussion_locked], is_editable: can_edit_issuable }.to_json.html_safe
      #js-lock-entry-point

      .js-sidebar-participants-entry-point

      - if signed_in
        .js-sidebar-subscriptions-entry-point

      - project_ref = issuable_sidebar[:reference]
      .block.with-sub-blocks
        .project-reference.sub-block
          .sidebar-collapsed-icon.dont-change-state
            = clipboard_button(text: project_ref, title: _('Copy reference'), placement: "left", boundary: 'viewport')
          .cross-project-reference.hide-collapsed
            %span
              = _('Reference:')
              %cite{ title: project_ref }
                = project_ref
            = clipboard_button(text: project_ref, title: _('Copy reference'), placement: "left", boundary: 'viewport')
        - if issuable_type == 'merge_request'
          .sidebar-source-branch.sub-block
            .sidebar-collapsed-icon.dont-change-state
              = clipboard_button(text: source_branch, title: _('Copy branch name'), placement: "left", boundary: 'viewport')
            .sidebar-mr-source-branch.hide-collapsed
              %span
                = _('Source branch: %{source_branch_open}%{source_branch}%{source_branch_close}').html_safe % { source_branch_open: "<cite class='ref-name' title='#{source_branch}'>".html_safe, source_branch_close: "</cite>".html_safe, source_branch: source_branch }
              = clipboard_button(text: source_branch, title: _('Copy branch name'), placement: "left", boundary: 'viewport')

      - if issuable_sidebar.dig(:current_user, :can_move)
        .block.js-sidebar-move-issue-block
          .sidebar-collapsed-icon{ data: { toggle: 'tooltip', placement: 'left', container: 'body', boundary: 'viewport' }, title: _('Move issue') }
            = custom_icon('icon_arrow_right')
          .dropdown.sidebar-move-issue-dropdown.hide-collapsed
            %button.btn.btn-default.btn-block.js-sidebar-dropdown-toggle.js-move-issue{ type: 'button',
              data: { toggle: 'dropdown', display: 'static', track_label: "right_sidebar", track_property: "move_issue", track_event: "click_button", track_value: "" } }
              = _('Move issue')
            .dropdown-menu.dropdown-menu-selectable.dropdown-extended-height
              = dropdown_title(_('Move issue'))
              = dropdown_filter(_('Search project'), search_id: 'sidebar-move-issue-dropdown-search')
              = dropdown_content
              = dropdown_loading
              = dropdown_footer add_content_class: true do
                %button.btn.btn-success.sidebar-move-issue-confirmation-button.js-move-issue-confirmation-button{ type: 'button', disabled: true }
                  = _('Move')
                  = loading_icon(css_class: 'gl-vertical-align-text-bottom sidebar-move-issue-confirmation-loading-icon')

    -# haml-lint:disable InlineJavaScript
    %script.js-sidebar-options{ type: "application/json" }= issuable_sidebar_options(issuable_sidebar).to_json.html_safe
