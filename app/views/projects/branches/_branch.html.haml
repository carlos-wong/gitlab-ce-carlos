- merged = local_assigns.fetch(:merged, false)
- commit = @repository.commit(branch.dereferenced_target)
- bar_graph_width_factor = @max_commits > 0 ? 100.0/@max_commits : 0
- diverging_commit_counts = @repository.diverging_commit_counts(branch)
- number_commits_distance = diverging_commit_counts[:distance]
- number_commits_behind = diverging_commit_counts[:behind]
- number_commits_ahead = diverging_commit_counts[:ahead]
- merge_project = merge_request_source_project_for_project(@project)
%li{ class: "branch-item js-branch-#{branch.name}" }
  .branch-info
    .branch-title
      = sprite_icon('fork', size: 12)
      = link_to project_tree_path(@project, branch.name), class: 'item-title str-truncated-100 ref-name prepend-left-8 qa-branch-name' do
        = branch.name
      - if branch.name == @repository.root_ref
        %span.badge.badge-primary.prepend-left-5 default
      - elsif merged
        %span.badge.badge-info.has-tooltip.prepend-left-5{ title: s_('Branches|Merged into %{default_branch}') % { default_branch: @repository.root_ref } }
          = s_('Branches|merged')

      - if protected_branch?(@project, branch)
        %span.badge.badge-success.prepend-left-5
          = s_('Branches|protected')

      = render_if_exists 'projects/branches/diverged_from_upstream', branch: branch

    .block-truncated
      - if commit
        = render 'projects/branches/commit', commit: commit, project: @project
      - else
        = s_('Branches|Cant find HEAD commit for this branch')

  - if branch.name != @repository.root_ref
    - if number_commits_distance.nil?
      .divergence-graph.d-none.d-md-block{ title: s_('%{number_commits_behind} commits behind %{default_branch}, %{number_commits_ahead} commits ahead') % { number_commits_behind: diverging_count_label(number_commits_behind),
        default_branch: @repository.root_ref,
        number_commits_ahead: diverging_count_label(number_commits_ahead) } }
        .graph-side
          .bar.bar-behind{ style: "width: #{number_commits_behind * bar_graph_width_factor}%" }
          %span.count.count-behind= diverging_count_label(number_commits_behind)
        .graph-separator
        .graph-side
          .bar.bar-ahead{ style: "width: #{number_commits_ahead * bar_graph_width_factor}%" }
          %span.count.count-ahead= diverging_count_label(number_commits_ahead)
    - else
      .divergence-graph.d-none.d-md-block{ title: s_('More than %{number_commits_distance} commits different with %{default_branch}') % { number_commits_distance: diverging_count_label(number_commits_distance),
        default_branch: @repository.root_ref} }
        .graph-side.full
          .bar{ style: "width: #{number_commits_distance * bar_graph_width_factor}%" }
          %span.count= diverging_count_label(number_commits_distance)

  .controls.d-none.d-md-block<
    - if merge_project && create_mr_button?(@repository.root_ref, branch.name)
      = link_to create_mr_path(@repository.root_ref, branch.name), class: 'btn btn-default' do
        = _('Merge request')

    - if branch.name != @repository.root_ref
      = link_to project_compare_path(@project, @repository.root_ref, branch.name),
        class: "btn btn-default #{'prepend-left-10' unless merge_project}",
        title: s_('Branches|Compare') do
        = s_('Branches|Compare')

    = render 'projects/buttons/download', project: @project, ref: branch.name, pipeline: @refs_pipelines[branch.name]

    - if can?(current_user, :push_code, @project)
      - if branch.name == @project.repository.root_ref
        %button{ class: "btn btn-remove remove-row js-ajax-loading-spinner has-tooltip disabled",
          disabled: true,
          title: s_('Branches|The default branch cannot be deleted') }
          = icon("trash-o")
      - elsif protected_branch?(@project, branch)
        - if can?(current_user, :push_to_delete_protected_branch, @project)
          %button{ class: "btn btn-remove remove-row js-ajax-loading-spinner has-tooltip",
            title: s_('Branches|Delete protected branch'),
            data: { toggle: "modal",
              target: "#modal-delete-branch",
              delete_path: project_branch_path(@project, branch.name),
              branch_name: branch.name,
              is_merged: ("true" if merged) } }
            = icon("trash-o")
        - else
          %button{ class: "btn btn-remove remove-row js-ajax-loading-spinner has-tooltip disabled",
            disabled: true,
            title: s_('Branches|Only a project maintainer or owner can delete a protected branch') }
            = icon("trash-o")
      - else
        = link_to project_branch_path(@project, branch.name),
          class: "btn btn-remove remove-row qa-remove-btn js-ajax-loading-spinner has-tooltip",
          title: s_('Branches|Delete branch'),
          method: :delete,
          data: { confirm: s_("Branches|Deleting the '%{branch_name}' branch cannot be undone. Are you sure?") % { branch_name: branch.name } },
          remote: true,
          'aria-label' => s_('Branches|Delete branch') do
          = icon("trash-o")
